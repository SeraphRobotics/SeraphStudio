<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Printer name ="Fab@Home Model 3" formatVersion="1.0">
  <motion>
    <acceleration units="mm/s/s">100</acceleration>
    <!--Unit of distance is mm for all values.-->
    <axis>
      <name>X</name>
      <actuatorID>0</actuatorID>
      <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
      <revolutionsPerDistance unit ="mm">0.028148728</revolutionsPerDistance>
      <!-- The revolutions per distance unit of the axis-->
      <!-- 0.0276791205,0.0331572798 ,0.0331572798 -->
      <range units ="mm">230</range>
    </axis>
    <axis>
      <name>Y</name>
      <actuatorID>1</actuatorID>
      <revolutionsPerDistance unit ="mm">0.027881509</revolutionsPerDistance>
      <range units ="mm">200</range>
    </axis>
    <axis>
      <name>Z</name>
      <actuatorID>2</actuatorID>
      <revolutionsPerDistance unit ="mm">0.0331572798</revolutionsPerDistance>
      <range units ="mm">180</range>
    </axis>
  </motion>

  <tool name="Displacement Extruder">
    <bay>
      <id>0</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">10</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>displacement</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
          function onVoxel(voxel){
            var suckbackQ = 1000;//389.19;// from old code = old_msps*pitch = 5000*0.000397
            var path = xyz.pathTo(voxel.x,voxel.y,voxel.z,material.pathspeed);
            //var id = actuatorIDs[0]
            
            
            //Pushout
            //var v1 = new State();
            //v1[id] = material.compressionVolume*revolutionsPerVolume;
            //v1[0] = material.compressionVolume/suckbackQ;
            
            
            //Deposition
            //var dt = voxel.volume / material.Q;
            //var v2 = new State();
            //v2[0] = dt;
            //v2[id] = voxel.volume*revolutionsPerVolume;
            
            //Suckback
            //var v3  =new State();
            //v3[id]=0;-material.compressionVolume*revolutionsPerVolume;
            //v3[0] =0; material.compressionVolume/suckbackQ;
            
            
            //path.addState(v1);
            //path.addState(v2);
            //path.addState(v3);
            return path;
          }
		  
          function onPath(path){
             var suckbackQ = 389.19;// from old code = old_msps*pitch = 5000*0.000397
             var np = xyz.pathAlong(path,material.pathspeed);
             //var id = actuatorIDs[0]
             //Pushout
             //var v1 = new State();
             //v1[id] =material.compressionVolume*revolutionsPerVolume;
             //v1[0] = material.compressionVolume/suckbackQ;


             // Deposition
             //var i=0;
             //var d=0;
             //var dt=0;
             //for (i=0;i<=np.length-1;i++){
                  //var tempstate = np[i];
                  //dt = tempstate[0];
                  //d = tempstate.distance;
                  //tempstate[id] = material.Q/material.pathspeed*d*revolutionsPerVolume;//dt*material.Q*revolutionsPerVolume;
                  //np[i] = tempstate;
             //}
             
             //Suckback
             //var volumeSuckedBack =0;
             //var j=0
             //var StateVol = 0;
             //var bufferVol = 0;
             //var sbVol=0;
             //var doneSB=0;
             //for (j=np.length-1;j>0;j--){
                //var tempstate = np[j];
                
                //StateVol = material.Q/material.pathspeed*tempstate.distance;
                //sbVol = suckbackQ/material.pathspeed*tempstate.distance;
                
                //if(doneSB ==0){
                    //if (material.compressionVolume > (volumeSuckedBack+sbVol)){
                      //tempstate[id] = (StateVol-sbVol)*revolutionsPerVolume
                      //np[i] = tempstate;
                      //volumeSuckedBack+=sbVol;
                    //}else{
                        //doneSB=1;
                        //bufferVol = material.compressionVolume - volumeSuckedBack;
                        //print("Buffer is ",bufferVol);
                    //}
                //}
             //}
             //var v3  =new State();
             //v3[id]= -(material.compressionVolume - volumeSuckedBack)*revolutionsPerVolume; //-material.compressionVolume*revolutionsPerVolume;
             //v3[0] = bufferVol/suckbackQ;   //material.compressionVolume/suckbackQ;

             //np.addState(v1,0);
             //np.addState(v3);
             return np;
          }
          ]]>
        </script>
      </actuation>

      <location>
        <x>0</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
  </tool>
  
  
  
  
  <system>
    <warmUp></warmUp>
    <!--this should be the script of either XDFL or GCODE run at first conneciton-->
    <coolDown>
      <!--this should be the script of either XDFL or GCODE run at the end of a print-->
      <script type="XDFL">
        <![CDATA[<path coordinates="rel"><point><x>0</x><y>0</y><z>-20</z></point></path>]]>
      </script>
    </coolDown>
  </system>

  <electronics type="JrKerr Snap Motors">
    <controller>
      <comPort>6</comPort>
      <numModules>3</numModules>
      <buffSize>80</buffSize>
      <baudRate>19200</baudRate>
      <bufferRate unit="hz">30</bufferRate>
      <xyzGroupAddress>128</xyzGroupAddress>
    </controller>
    <actuator>
      <id>0</id>
      <type>DC/Encoder</type>
      <!--Address of the motor.-->
      <address>1</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>0</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>2200</kp>
      <!--Kd value of motor gains.-->
      <kd>30000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <!-- What does this mean???-->
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
    <actuator>
      <id>1</id>
      <!--Address of the motor.-->
      <address>2</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <type>DC/Encoder</type>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1200</kp>
      <!--Kd value of motor gains.-->
      <kd>23000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
    <actuator>
      <id>2</id>
      <!--Address of the motor.-->
      <address>3</address>
      <type>DC/Encoder</type>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1000</kp>
      <!--Kd value of motor gains.-->
      <kd>20000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
  </electronics>
</Printer>
