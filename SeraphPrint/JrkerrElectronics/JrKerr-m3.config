<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Printer name ="Fab@Home Model 3" formatVersion="1.0">
  <motion>
    <printAcceleration>100</printAcceleration>
    <!--Unit of distance is mm for all values.-->
    <axis name="X">
      <actuatorID>0</actuatorID>
      <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
      <revolutionsPerDistance unit ="mm"> 200</revolutionsPerDistance>
      <!-- The revolutions per distance unit of the axis-->
      <range units ="mm">230</range>
    </axis>
    <axis name="Y">
      <actuatorID>1</actuatorID>
      <revolutionsPerDistance unit ="mm"> 200</revolutionsPerDistance>
      <range units ="mm">200</range>
    </axis>
    <axis name="Z">
      <actuatorID>2</actuatorID>
      <revolutionsPerDistance unit ="mm"> 200</revolutionsPerDistance>
      <range units ="mm">180</range>
    </axis>
  </motion>

  <tool name="Displacement Extruder">
    <bay>
      <id>0</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">10</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>displacement</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">1.0</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>3</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
          function onVoxel(voxel){

              var npath = [
              [0,0,0,0,0],
              [3.0,-1.0,-1.0,0.0,1.0],
              [0.5,0,0,0,0]
              ];

              cmotion.moveAlongPath(npath);
              return voxel.volume+actuatorIDs[0];
          }
		  
          function onPath(path){
             return path.points[2].x+material.pathspeed;
          }

          function test(){
              var motorV = motors[actuatorIDs[0]];
              var volume = voxel.volume;
              motorV.moveAbsolute(1,1,1);
              motorV.waitMove();
            }
          ]]>
        </script>
      </actuation>

      <location>
        <x>0</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
  </tool>
  <!-- This is what a discrete state tool would look like
  <tool name ="Valve">
      <bay>
        <id>1</id>
        <flow>continuous</flow>
        <volume units="mm^3">10</volume>
        <actuation>
          <method>descrite</method>
          <degreesPerState>90</degreesPerState>
          <actuatorID>3</actuatorID>
          <![CDATA[
          function onVoxel(voxel){
              var Motor = motors[actuatorIDs[0]];
              Motor.moveRelative(degreesPerState,10,10);
			  var time = material.QPS*voxel.volume;
			  sleep(time)
			  Motor.moveRelative(-degreesPerState,10,10);
          }
          ]]>
        </actuation>

        <location>
          <x>0</x>
          <y>0</y>
          <z>0</z>
        </location>
      </bay>
  </tool> -->


  <system>
    <warmUp></warmUp>
    <!--this should be the script of either XDFL or GCODE run at first conneciton-->
    <coolDown>
      <!--this should be the script of either XDFL or GCODE run at the end of a print-->
      <script type="XDFL">
        <![CDATA[<path coordinates="rel"><point><x>0</x><y>0</y><z>-20</z></point></path>]]>
      </script>
    </coolDown>
  </system>

  <electronics type="JrKerr Snap Motors">
    <controller>
      <comPort>3</comPort>
      <numModules>4</numModules>
      <baudRate>19200</baudRate>
      <xyzGroupAddress>128</xyzGroupAddress>
    </controller>
    <actuator>
      <id>0</id>
      <type>DC/Encoder</type>
      <!--Address of the motor.-->
      <address>1</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>0</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>2200</kp>
      <!--Kd value of motor gains.-->
      <kd>30000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <!-- What does this mean???-->
    </actuator>
    <actuator>
      <id>1</id>
      <!--Address of the motor.-->
      <address>2</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <type>DC/Encoder</type>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1200</kp>
      <!--Kd value of motor gains.-->
      <kd>23000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
    </actuator>
    <actuator>
      <id>2</id>
      <!--Address of the motor.-->
      <address>3</address>
      <type>DC/Encoder</type>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>0</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1000</kp>
      <!--Kd value of motor gains.-->
      <kd>20000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
    <actuator>
      <id>3</id>
      <!--Address of the motor.-->
      <address>4</address>
      <type>DC/Encoder</type>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>0</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1000</kp>
      <!--Kd value of motor gains.-->
      <kd>20000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
    </actuator>
  </electronics>
</Printer>
